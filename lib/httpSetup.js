// Generated by CoffeeScript 1.8.0
(function() {
  var http, httpSetup, https, log, old_http_request, old_https_request, querystring, tunnel, url;

  https = require("https");

  http = require("http");

  url = require("url");

  tunnel = require("./tunnelAgent");

  querystring = require("querystring");

  log = require("lawg");

  old_https_request = https.request;

  old_http_request = http.request;

  module.exports = httpSetup = {
    createHttpsAgent: function(options) {
      return new https.Agent(options);
    },
    config: function(proxyUrl, anyCert) {
      var httpsAgent, proxy, tunnelName, tunnelOptions, _m;
      if (proxyUrl) {
        proxy = url.parse(proxyUrl);
      }
      if (!proxy && !anyCert) {
        return;
      }
      if (anyCert && !proxy) {
        https.request = function() {
          var options;
          options = arguments[0];
          if (typeof options === 'string') {
            options = url.parse(options);
          }
          options.rejectUnauthorized = false;
          return old_https_request.apply(void 0, Array.apply(null, arguments));
        };
        httpSetup.createHttpsAgent = function(options) {
          options.rejectUnauthorized = false;
          return new https.Agent(options);
        };
        return;
      }
      _m = {
        'https:': 'Https',
        'http:': 'Http'
      };
      tunnelOptions = {
        proxy: {
          host: proxy.hostname,
          port: +proxy.port,
          proxyAuth: proxy.auth
        },
        rejectUnauthorized: (anyCert ? false : true)
      };
      tunnelName = "httpsOver" + _m[proxy.protocol];
      httpSetup.createHttpsAgent = function(options) {
        var k, ret, v;
        for (k in tunnelOptions) {
          v = tunnelOptions[k];
          options[k] = v;
        }
        ret = tunnel[tunnelName](options);
        return ret;
      };
      httpsAgent = tunnel[tunnelName](tunnelOptions);
      https.request = function() {
        var options;
        options = arguments[0];
        if (typeof options === 'string') {
          options = url.parse(options);
          arguments[0] = options;
        }
        if (anyCert) {
          options.rejectUnauthorized = false;
        }
        if (options.agent == null) {
          options.agent = httpsAgent;
        }
        return old_https_request.apply(void 0, Array.apply(null, arguments));
      };
      return http.request = function() {
        var options;
        options = arguments[0];
        if (typeof options === 'string') {
          options = url.parse(options);
          arguments[0] = options;
        }
        if (options.headers == null) {
          options.headers = {};
        }
        if (!options.headers.Host) {
          options.headers.Host = "" + options.hostname;
          if (options.port !== 80) {
            options.headers.Host += ":" + options.port;
          }
        }
        if (!/^http/.test(options.path)) {
          options.path = "http://" + options.headers.Host + options.path;
        }
        options.hostname = proxy.hostname;
        options.port = proxy.port;
        return old_http_request.apply(void 0, Array.apply(null, arguments));
      };
    }
  };

}).call(this);

//# sourceMappingURL=httpSetup.js.map
