// Generated by CoffeeScript 1.8.0

/*
  Very simple web server, where express is too much:

  app = new ChainedWebApps()
  server = http.createServer()
  app.bindToHttpServer(server)

   * now add aps
   * apps are called in the sequence added.  If req is handled, do not call next()
  app.add (req, res, next)->
    if 'key' of req.headers
      res.end()
    else next()
  app.add (req, res, next)->
    if /blah/.test req.url
      res.end()
    else next()
 */

(function() {
  var ChainedWebApps,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = ChainedWebApps = (function() {
    function ChainedWebApps() {
      var defaultApp;
      defaultApp = function(req, res) {
        res.writeHead(404);
        return res.end();
      };
      this.apps = [defaultApp];
    }

    ChainedWebApps.prototype.bindToHttpServer = function(server) {
      server.on('request', (function(_this) {
        return function(req, res) {
          var callApp;
          callApp = function(i) {
            if (i < _this.apps.length) {
              return _this.apps[i](req, res, function() {
                return callApp(i + 1);
              });
            }
          };
          return callApp(0);
        };
      })(this));
      return this;
    };

    ChainedWebApps.prototype.setDefaultApp = function(app) {
      return this.apps[this.apps.length - 1] = app;
    };

    ChainedWebApps.prototype.add = function(app) {
      if (__indexOf.call(this.apps, app) < 0) {
        [].splice.apply(this.apps, [-1, (-1) - -1].concat(app)), app;
      }
      return this;
    };

    ChainedWebApps.prototype.remove = function(app) {
      var a, apps;
      apps = (function() {
        var _i, _len, _ref, _results;
        _ref = this.apps;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          if (a !== app) {
            _results.push(a);
          }
        }
        return _results;
      }).call(this);
      if (apps.length < this.apps.length) {
        this.apps = apps;
      }
      return this;
    };

    ChainedWebApps.prototype.exists = function(app) {
      return __indexOf.call(this.apps, app) >= 0;
    };

    return ChainedWebApps;

  })();

}).call(this);

//# sourceMappingURL=ChainedWebApps.js.map
